PROJECT(CellMLAPIPlugin)

MACRO(RETRIEVE_CELLML_API_SETTINGS)
    # Retrieve CellML API settings

    IF(WIN32)
        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES
            ${CMAKE_IMPORT_LIBRARY_PREFIX}annotools${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}ccgs${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cellml${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cevas${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cis${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cuses${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}malaes${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}vacss${CMAKE_IMPORT_LIBRARY_SUFFIX}
        )

        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_FOR_DEPLOYMENT
            annotools ccgs cellml cevas cis cuses malaes vacss)
    ELSEIF(APPLE)
        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs.3${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cis.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss.1${CMAKE_SHARED_LIBRARY_SUFFIX}
        )
    ELSE()
        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs${CMAKE_SHARED_LIBRARY_SUFFIX}.3
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cis${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss${CMAKE_SHARED_LIBRARY_SUFFIX}.1
        )
    ENDIF()

    # Ignore some warnings on Windows

    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091 /wd4290")
        # Note: on Windows, some warnings get generated. Yet, we have nothing to
        #       do with them, so we ignore them...
    ENDIF()
ENDMACRO()

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${MAIN_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}")

# If you change this, also change the EXPECTED_CELLMLAPI_SHA1_VALUE below for
# every platform. Search the CellML API buildbot logs for 'SHA1 sum follows'
# to quickly find the correct SHA1 to use.
SET(CELLML_API_SNAPSHOT "20130522")
SET(CELLML_API_VERSION "1.13")
SET(CELLML_API_BINDIR "${CMAKE_SOURCE_DIR}/${RELATIVE_PROJECT_SOURCE_DIR}")

IF(WIN32)
  SET(CELLML_API_PLATFORM "win32")
  IF(DEBUG_MODE)
    SET(EXPECTED_CELLMLAPI_SHA1_VALUE 435e84385848d66f73358eb1a5cf77f1152396aa)
    SET(CELLML_API_FILE "cellml-sdk-${CELLML_API_VERSION}-Win32-MSVC10-Debug.zip")
    SET(CELLML_API_FILE2 "cellml-sdk-${CELLML_API_VERSION}-Win32-MSVC10-Debug.zip")
  ELSE()
    SET(EXPECTED_CELLMLAPI_SHA1_VALUE bde141e8aeb33f4473b523b9ff9d96f319e24722)
    SET(CELLML_API_FILE "cellml-sdk-${CELLML_API_VERSION}-Win32-MSVC10.zip")
    SET(CELLML_API_FILE2 "cellml-sdk-${CELLML_API_VERSION}-Win32-MSVC10.zip")
  ENDIF()
ELSEIF(APPLE)
  SET(EXPECTED_CELLMLAPI_SHA1_VALUE f6242616068b154039ee4058f52c04f02c6c3444)
  SET(CELLML_API_PLATFORM "mac")
  SET(CELLML_API_FILE "cellml-sdk-${CELLML_API_VERSION}-Mac.dmg")
  SET(CELLML_API_FILE2 "cellml-sdk.cdr")
ELSE()
  IF(32BIT_MODE)
    SET(EXPECTED_CELLMLAPI_SHA1_VALUE db40d2d29a5cd817bb4a72439260794d714e5041)
    SET(CELLML_API_PLATFORM "linux-x86")
    SET(CELLML_API_FILE "cellml-sdk-${CELLML_API_VERSION}-Linux-i686.tar.bz2")
    SET(CELLML_API_FILE2 "cellml-sdk-${CELLML_API_VERSION}-Linux-i686.tar.bz2")
  ELSE()
    SET(EXPECTED_CELLMLAPI_SHA1_VALUE 8c19f5ea6699320ec3eb1573ff6d8162e93b5297)
    SET(CELLML_API_PLATFORM "linux-x86_64")
    SET(CELLML_API_FILE "cellml-sdk-${CELLML_API_VERSION}-Linux-x86_64.tar.bz2")
    SET(CELLML_API_FILE2 "cellml-sdk-${CELLML_API_VERSION}-Linux-x86_64.tar.bz2")
  ENDIF()
ENDIF()

RETRIEVE_CELLML_API_SETTINGS()

SET(CELLML_API_PATH "${CELLML_API_BINDIR}/${CELLML_API_FILE}")
SET(CELLML_API_PATH2 "${CELLML_API_BINDIR}/${CELLML_API_FILE2}")
SET(CELLML_SDK_URL "http://downloads.sourceforge.net/project/cellml-api/CellML-API-Nightly/${CELLML_API_VERSION}/${CELLML_API_SNAPSHOT}/${CELLML_API_PLATFORM}/${CELLML_API_FILE}")

IF (EXISTS ${CELLML_API_PATH})
  FILE(SHA1 ${CELLML_API_PATH} ACTUAL_SHA1_VALUE)
  IF(NOT "${ACTUAL_SHA1_VALUE}" STREQUAL "${EXPECTED_CELLMLAPI_SHA1_VALUE}")
    # Remove it, triggering a redownload below.
    FILE(REMOVE ${CELLML_API_PATH})
    FILE(REMOVE ${CELLML_API_PATH2})
  ENDIF()
ENDIF()

IF (NOT EXISTS ${CELLML_API_PATH2})
  IF (NOT EXISTS ${CELLML_API_PATH})
    MESSAGE("Retrieving '${CELLML_SDK_URL}' to ${CELLML_API_PATH}...")
    FILE(MAKE_DIRECTORY ${CELLML_API_BINDIR})
    FILE(DOWNLOAD "${CELLML_SDK_URL}" "${CELLML_API_PATH}"
      SHOW_PROGRESS)
  ENDIF()

  IF (WIN32)
    EXECUTE_PROCESS(
      COMMAND unzip -j -d "${CELLML_API_BINDIR}" ${CELLML_API_PATH2}
      )
  ELSEIF (APPLE)
    SET(CELLML_API_VOLUME "${CMAKE_SOURCE_DIR}/${RELATIVE_PROJECT_SOURCE_DIR}/cellml-sdk-${CELLML_API_VERSION}-Mac")
    EXECUTE_PROCESS(COMMAND hdiutil convert ${CELLML_API_PATH} -format UDTO -o ${CELLML_API_PATH2})
    EXECUTE_PROCESS(
      COMMAND hdiutil attach ${CELLML_API_PATH2} -mountroot "${CMAKE_SOURCE_DIR}/${RELATIVE_PROJECT_SOURCE_DIR}"
      )
    FILE(COPY "${CELLML_API_VOLUME}/CellML SDK ${CELLML_API_VERSION}.app/Contents/Resources/lib/"
         DESTINATION "${CELLML_API_BINDIR}" FILES_MATCHING PATTERN "*.dylib")
    FILE(COPY "${CELLML_API_VOLUME}/CellML SDK ${CELLML_API_VERSION}.app/Contents/Resources/include/"
         DESTINATION "${CELLML_API_BINDIR}" FILES_MATCHING PATTERN "*.h*")
    EXECUTE_PROCESS(
      COMMAND hdiutil detach ${CELLML_API_VOLUME}
      )
  ELSE()
    EXECUTE_PROCESS(
      COMMAND tar --strip-components=2 -xjf "${CELLML_API_PATH2}" -C "${CELLML_API_BINDIR}"
      )
  ENDIF()
ENDIF()

# CellML API libraries

SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR ${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR})

# Add the plugin

ADD_PLUGIN(CellMLAPI
    SOURCES
        ../../plugininfo.cpp

        src/cellmlapiplugin.cpp
    HEADERS_MOC
        src/cellmlapiplugin.h
    INCLUDE_DIRS
        bin/${DISTRIB_BINARY_DIR}
        src
    QT_MODULES
        Core Widgets
    QT_DEPENDENCIES
        QtCore
        QtGui
    EXTERNAL_BINARY_DEPENDENCIES_DIR
        ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR}
    EXTERNAL_BINARY_DEPENDENCIES
        ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES}
)

# Deploy the plugin's external dependencies
# Note: it must be done here since ADD_PLUGIN doesn't support the fact that an
#       external dependency may have dependencies of its own

IF(WIN32)
    # The CellML API libraries

    FOREACH(CELLML_API_EXTERNAL_BINARY_DEPENDENCY_FOR_DEPLOYMENT ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_FOR_DEPLOYMENT})
        WINDOWS_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR}
                               ${CMAKE_SHARED_LIBRARY_PREFIX}${CELLML_API_EXTERNAL_BINARY_DEPENDENCY_FOR_DEPLOYMENT}${CMAKE_SHARED_LIBRARY_SUFFIX})
    ENDFOREACH()
ELSEIF(APPLE)
    # Deploy the CellML API libraries together with their respective CellML API
    # dependencies, if any

    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} annotools.2
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} ccgs.3
                        annotools.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cevas.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cis.2
                        annotools.2 ccgs.3 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cuses.1
                        annotools.2 cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} malaes.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} vacss.1
                        annotools.2 cellml.2 cuses.1)
ELSE()
    # The CellML API binaries

    FOREACH(CELLML_API_EXTERNAL_BINARY_DEPENDENCY ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES})
        LINUX_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR}
                             ${CELLML_API_EXTERNAL_BINARY_DEPENDENCY})
    ENDFOREACH()
ENDIF()
