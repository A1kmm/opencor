PROJECT(CellMLAPIPlugin)

MACRO(RETRIEVE_CELLML_API_SETTINGS)
    # Retrieve CellML API settings

    IF(WIN32)
        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES
            ${CMAKE_IMPORT_LIBRARY_PREFIX}annotools${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}ccgs${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celeds${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celedsexporter${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cellml${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cevas${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cis${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cuses${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}malaes${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}spros${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}srus${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}telicems${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}vacss${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}xpath${CMAKE_IMPORT_LIBRARY_SUFFIX}
        )

        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_FOR_DEPLOYMENT
            annotools ccgs celeds celedsexporter cellml cevas cis cuses malaes spros srus telicems vacss xpath)
    ELSEIF(APPLE)
        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cis.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}spros.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}srus.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}telicems.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}xpath.1${CMAKE_SHARED_LIBRARY_SUFFIX}
        )
    ELSE()
        SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cis${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}spros${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}srus${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}telicems${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}xpath${CMAKE_SHARED_LIBRARY_SUFFIX}.1
        )
    ENDIF()

    # Ignore some warnings on Windows

    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091 /wd4290")
        # Note: on Windows, some warnings get generated. Yet, we have nothing to
        #       do with them, so we ignore them...
    ENDIF()
ENDMACRO()

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${MAIN_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}")

# Temporarily disable this so I can supply my own binaries.
IF(FALSE)
IF(WIN32)
    IF(DEBUG_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll e372ef738992ddef5e290048f5ce46fee05e27fc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib a374ae1170f72c287eb11f564c21a01ec0784c82)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll 33a313749dbbf176b89d6d40bec70a0d623ba70e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 8c4ae6f11725152615e20b3d166315490a47867b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll 7e1ce40b41ffeccc88484391c2b160092c05eeac)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 02034eb55d3adf493aeb7175ee5ff06f61a55f0b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll 67b40a7f92fdd068daa9ec01578336cbb52d8845)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib 23af09722fcfaeedfb4a9fd93fc5f0ad1189642e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll f49dc00fe3e3957d4b14dfa9694f9fae25553c72)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib cb3e00ca8d795228f70637cd1a45d660e5a6d0ca)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll 6f3529dff9bfa2fd3587f32a325d5ba1a35f2506)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 72beda22ddc2d6c33c5f6fba84d130b3dba4de43)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cis.dll ef9d2141a7f8053ae8b8e6dde3a949d23ef8547b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cis.lib 4929b823c81e71374b6c2fa3183bdda131c7bd84)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 9c085351845184cc2c98803e96de726f04fbb946)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib f579df66d26bc648791a45980512e362181ce15c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 2dc7d143f9e4fac92da966269f19e226e6982f81)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib c8cc85f20e1b1999637d0e3670241f6216fd65a8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} spros.dll cb12db02f4a36cb71b9263f2e223ca6a76240951)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} spros.lib d05b97b961e6006abba0f59d46a8595b91b95791)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} srus.dll f6002448eddf538e70d9e3eeebfb9992edea06ae)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} srus.lib 1cd2585daebfa6717d17b07b6e27d970650cdcc8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} telicems.dll 9fec79f7ef4658b04126376d21cb6e4a5655301e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} telicems.lib 7dd91eef1be62b04e41fd4cd8bc99ba48f96fdf6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 2c6a970f9c5202da40c629e503e1b00b8a3ae37a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 0caf32107401312cad52b4cc98b6d5fb1a78332f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} xpath.dll 9a23d864dec3d9cdeb76c21b1a2d3edd586cb124)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} xpath.lib e4495e8cb5137fafc068cb697af465c3d023a023)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 5646483fb41df34e1faee4b0c3e1f8c966dc9526)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib 32d1f8ce0b418b1684b4cd94c7f4c4381b9c3d36)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll c2567fa26057ab8bf1dc058e66a0a0f88b364a40)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 24525883a31d81d59883e3245412a5394f0bed2e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll d10b3a3c4f66bdfaa2ceceed353580710a95ad54)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 161ca36d99437ae62f5dc7740ffacd8b28a01459)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll 6c6150f758cc6ed8524b7c401deefd09642c3c8c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib df7bcb2bfe16c017840b9c1de577c5828f2cf54c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 5fd75a46ff96380b301dea71277af61dba29eb3e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib c24ce2aacb88270ead2e131c5e16333363966eb8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll df6acee3327e62b917450330312de8a9e170ec19)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 4e79f99269bbac45f3ff347757a27b077fb038ce)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cis.dll 6e3fcc1160b4ef7704a21bf9bea1ffb929b27926)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cis.lib a7d0dfdf03fdd6cd150e81884c297d094e32adac)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll eb36c41f5b7cefdd635737ed43c74c13b4122075)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib 9983dbc0b6ca070c74103145e04209dc9507af8c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll f67eaffbb27cdcec6602f692beffa402ff7445db)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 987c97025488948c4a0b2a32ac54c5bcd6beedae)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} spros.dll 40251022ef159adfb99b1e7eab2e87c4407a019b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} spros.lib d60edd9c640e076d4334ff06af6c738d1571ca77)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} srus.dll b62652724d3c7e529f2131531556ea50b0e61ff2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} srus.lib 13b4b2865bcea6967ac1f8fd4fdac906dbf0e846)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} telicems.dll 81e6e646c8343c002be809b2afc3c5276ab0d4c7)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} telicems.lib 046a0b704b0eb6906864845d49a564ff035eab21)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 51a390677bfba7d131db10a246cf7b3adeb7495d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib ccdd7aba73dd5998e695a203c03881d8ab80edfa)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} xpath.dll 3cc0d867fb7cb6125368961b049ca0669e1d2ce2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} xpath.lib dacbda9a0ed8b665bc7e55b25bdbdba6389726d7)
    ENDIF()
ELSEIF(APPLE)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.2.dylib a0e51ce6b35f5e47ea7c8ba0f5fcaa521ee57661)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.2.dylib a8c3df0c61c9044bd9025a142338fae226131e96)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.1.dylib c4ab76031d0ca1e73fbd8f8c12968f2d581b784c)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.1.dylib 0774af5a6ea534cd1131160a322453b4f5414ada)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.2.dylib 1bb145a6208b1234cc92e2d263380f06dc151b55)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.1.dylib 25a8d82b972430741474e4906ec9f682ffc51487)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcis.1.dylib d37d53a2d15fd794c1b1fdbe8b1b314f6f3c0fd7)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.1.dylib 8e07251b34749c466fb67dadef6a056a73b7932c)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.1.dylib e02a1472c7cef41c78092aa0319286a715ba4223)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libspros.1.dylib 2d9d1dcb7e445939ec665b9005eb870fd52370e0)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libsrus.1.dylib aa125f00e92d4ea2b5cf95c51b443cdecee217a9)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libtelicems.1.dylib 197c32a08e07279a5d2a9f2eb30d01300057f3bc)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.1.dylib 0d9437c04b3aefe82f46bf5e1e508ab7cbfae9bd)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libxpath.1.dylib d254537b6840e41ff490ee6ec698984c57fd97e8)
ELSE()
    IF(32BIT_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 1d0e99a44ced65d015431077c9dd4bb1889778e8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.2 7b2659b02f46198e7948046275b2b8f3f66d7e85)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 6bbf7b44a6eadc16ea4abb6046948ddda3703ba0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 19a69aa9ae92b94a923cb9322addfd84bed00579)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 6a6cecc4fcdb7abd888eea6a36a7d7e40ec5e31d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 faa8656a874fd63fafd3185e8123fccffd302254)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcis.so.1 9ddd2aa70ec7666795b37de24d9738f1cdfb5108)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 3505f3cbe4f3a637a33730ca7f446b9872be2212)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 f819f19dc4dd02075dda21c3e80f5e3dd1b416cf)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libspros.so.1 f46c60d457397ae94406e0a82f281040680f97b7)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libsrus.so.1 9ab294ec2b995edcec0d6a2816e4bf6b840c7be6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libtelicems.so.1 257b4a2e1fcc488e2a3b16c345552b93417d830a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 4f356112ca47e5455aff7fd24e124ac0b2b34335)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libxpath.so.1 e1b54e71e4440ca6502282e6a7af794270ec1bc2)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 950afa7fdb753e6e2da7f782e9ba14f07fe7aa4d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.2 6525f77c6ad1dabfcc447e90fac20e35ebe539db)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 722e84f1a95dddb3ef9b4997e437e4ba13b6e84b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 8c257c8bc40cfde67baa076e4958c3c39eb71e3e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 b6dfb2d04feac724c32a47b884ea50355696f57e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 22fcfef1b179a535a23492dc4e71dfd71da73f67)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcis.so.1 a5ad6ec4637b3f6156030ed819abb750ccb40e37)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 66cc3cde15b39c46b7adb575c071788cdf40f53b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 a446da46bba592d34d0cab173f61b8cc06d1b3d4)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libspros.so.1 dc4f932cee2427aa178f16e45eddbadec3fbefb3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libsrus.so.1 bcd7334b49e35ca6f9bb6fb3bd1624eb3065e91e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libtelicems.so.1 8b6e0c279440e44e4c646b0138be69aaa3b5fc24)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 ab38e05dc1f316159caad0fb5ad625084d9f224e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libxpath.so.1 80d511b324197323de8b888255dcd123e3e180b4)
    ENDIF()
ENDIF()
ENDIF(FALSE)

# CellML API libraries

SET(CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR ${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR})

RETRIEVE_CELLML_API_SETTINGS()

# Add the plugin

ADD_PLUGIN(CellMLAPI
    SOURCES
        ../../plugininfo.cpp

        src/cellmlapiplugin.cpp
    HEADERS_MOC
        src/cellmlapiplugin.h
    INCLUDE_DIRS
        include
        src
    QT_MODULES
        Core
    QT_DEPENDENCIES
        QtCore
    EXTERNAL_BINARY_DEPENDENCIES_DIR
        ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR}
    EXTERNAL_BINARY_DEPENDENCIES
        ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES}
)

# Deploy the plugin's external dependencies
# Note: it must be done here since ADD_PLUGIN doesn't support the fact that an
#       external dependency may have dependencies of its own

IF(WIN32)
    # The CellML API libraries

    FOREACH(CELLML_API_EXTERNAL_BINARY_DEPENDENCY_FOR_DEPLOYMENT ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_FOR_DEPLOYMENT})
        WINDOWS_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR}
                               ${CMAKE_SHARED_LIBRARY_PREFIX}${CELLML_API_EXTERNAL_BINARY_DEPENDENCY_FOR_DEPLOYMENT}${CMAKE_SHARED_LIBRARY_SUFFIX})
    ENDFOREACH()
ELSEIF(APPLE)
    # Deploy the CellML API libraries together with their respective CellML API
    # dependencies, if any

    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} annotools.2
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} ccgs.2
                        annotools.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} celeds.1
                        cellml.2 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} celedsexporter.1
                        annotools.2 ccgs.2 celeds.1 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cevas.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cis.1
                        annotools.2 ccgs.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} cuses.1
                        annotools.2 cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} malaes.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} spros.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} srus.1
                        annotools.2 ccgs.2 cellml.2 cevas.1 cis.1 cuses.1 malaes.1 xpath.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} telicems.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} vacss.1
                        annotools.2 cellml.2 cuses.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR} xpath.1
                        cellml.2)
ELSE()
    # The CellML API binaries

    FOREACH(CELLML_API_EXTERNAL_BINARY_DEPENDENCY ${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES})
        LINUX_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARY_DEPENDENCIES_DIR}
                             ${CELLML_API_EXTERNAL_BINARY_DEPENDENCY})
    ENDFOREACH()
ENDIF()
